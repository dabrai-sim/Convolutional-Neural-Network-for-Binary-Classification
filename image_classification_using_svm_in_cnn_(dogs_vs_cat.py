# -*- coding: utf-8 -*-
"""Image Classification Using SVM In CNN (Dogs vs Cat

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/image-classification-using-svm-in-cnn-dogs-vs-cat-c36b57ff-499b-4104-8cfa-e3c7b60d56e2.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240815/auto/storage/goog4_request%26X-Goog-Date%3D20240815T092348Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Da31e5dde326149ed8b269ac03c2704f5cf7caf6744dda8509797855186286922df11d004358d4f836beb73bfe0ee8f39dc284a5f6263b3666b32530d9a1d5606c3da03c0a43718d217155469cd10d4d29b1c5218acf4d1fe10c97bbd0b0e015ffd6e8c73a10c24172aa3b99e8887050de2b92734cd49a0019f03dae8e0efeab0b3a1948fa325e5e67981b1201664acb6671e08578353bb9802f9a2aab0e787b530cc903adc03e607eb263aebc4475633182f73b02fb7e4a2bed81c2d6e26efba463af576e1f7363811a723ceb29e92df6b9dbb3ae3c58f1a57eae86139eaa39fd9c40148c6dff4713c58550074d825053cc6fe9851ede87dc31f524c814a71c9
"""

# Convolutional Neural Network

# Importing the libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Preprocessing the training dataset
train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)
# Preprocessing the test dataset
test_datagen = ImageDataGenerator(rescale = 1./255)

# Now to read the data from the datasets
training_set = train_datagen.flow_from_directory('Datasets/train',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')
test_set = test_datagen.flow_from_directory('Datasets/test',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')

from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Dense
from tensorflow.keras.regularizers import l2

# Initialising the CNN
cnn = tf.keras.models.Sequential()

# Step 1 - Convolution
cnn.add(tf.keras.layers.Conv2D(filters=32,padding="same",kernel_size=3, activation='relu', strides=2, input_shape=[64, 64, 3]))

# Step 2 - Pooling
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

# Adding a second convolutional layer
cnn.add(tf.keras.layers.Conv2D(filters=32,padding='same',kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

# Step 3 - Flattening
cnn.add(tf.keras.layers.Flatten())

# Step 4 - Full Connection
cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

# Step 5 - Output Layer
#cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))
## For Binary Classification
cnn.add(Dense(1, kernel_regularizer=tf.keras.regularizers.l2(0.01),activation
             ='linear'))

cnn.summary()

# Part 3 - Training the CNN

# Compiling the CNN
cnn.compile(optimizer = 'adam', loss = 'hinge', metrics = ['accuracy'])

# Training the CNN on the Training set and evaluating it on the Test set
r=cnn.fit(x = training_set, validation_data = test_set, epochs = 15)

# plot the loss
import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

# save it as a h5 file

from tensorflow.keras.models import load_model

cnn.save('model_rcat_dog.h5')

from tensorflow.keras.models import load_model

# load model
model = load_model('model_rcat_dog.h5')

model.summary()

# Part 4 - Making a single prediction

import numpy as np
from tensorflow.keras.preprocessing import image
test_image = image.load_img('Datasets/test/test1/4251.jpg', target_size = (64,64))
test_image = image.img_to_array(test_image)
test_image = test_image/255
test_image = np.expand_dims(test_image, axis = 0)
result = cnn.predict(test_image)

result

if result[0]<0:
    print("The image classified is cat")
else:
    print("The image classified is dog")